{"version":3,"sources":["authActions.js"],"names":["RESTORE_TOKEN","SIGN_IN","SIGN_OUT","endpoint","Platform","OS","restoreToken","dispatch","getState","AsyncStorage","getItem","userData","jsonData","JSON","parse","type","userType","token","userToken","console","log","signIn","email","password","loginOptions","url","method","withCredentials","then","res","err","error","saveUserDataToStorage","signOut","signOutOptions","removeTokenToStorage","setItem","stringify","removeItem"],"mappings":"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","sourcesContent":["import { Platform } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport axios from \"axios\";\r\n\r\nexport const RESTORE_TOKEN = \"RESTORE_TOKEN\";\r\nexport const SIGN_IN = \"SIGN_IN\";\r\nexport const SIGN_OUT = \"SIGN_OUT\";\r\n\r\nlet endpoint;\r\n\r\nif (Platform.OS === \"android\") {\r\n  endpoint = \"http://10.0.2.2:5000/\";\r\n} else {\r\n  endpoint = \"http://localhost:5000/\";\r\n}\r\n\r\nexport const restoreToken = () => {\r\n  return async (dispatch, getState) => {\r\n    let userData;\r\n    let jsonData;\r\n\r\n    try {\r\n      userData = await AsyncStorage.getItem(\"userData\");\r\n      jsonData = JSON.parse(userData);\r\n\r\n      // After restoring token, we may need to validate it in production apps\r\n\r\n      // This will switch to the App screen or Auth screen and this loading\r\n      // screen will be unmounted and thrown away.\r\n      dispatch({\r\n        type: RESTORE_TOKEN,\r\n        userType: jsonData.userType,\r\n        token: jsonData.userToken,\r\n      });\r\n    } catch (e) {\r\n      // Restoring token failed\r\n      console.log(\"RESTORE_TOKEN: no token found in local storage\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const signIn = (email, password, userType) => {\r\n  return async (dispatch, getState) => {\r\n    // dispatch({ action: SIGN_IN, token: token ? token : null });\r\n\r\n    const loginOptions = {\r\n      url: `${endpoint}test_login/${userType}`,\r\n      method: \"get\",\r\n      withCredentials: true,\r\n    };\r\n    axios(loginOptions)\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n\r\n    let userToken = \"dummy-auth-token\";\r\n\r\n    dispatch({ type: SIGN_IN, userType: userType, userToken: userToken });\r\n    saveUserDataToStorage(userToken, userType);\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return async (dispatch, getState) => {\r\n    // dispatch({ action: SIGN_OUT, token: token ? token : null });\r\n    console.log(\"Signing out!\");\r\n    const signOutOptions = {\r\n      url: `${endpoint}logout`,\r\n      method: \"get\",\r\n      withCredentials: true,\r\n    };\r\n    axios(signOutOptions)\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n\r\n    let token = \"dummy-auth-token\";\r\n\r\n    dispatch({ type: SIGN_OUT });\r\n    removeTokenToStorage(token);\r\n  };\r\n};\r\n\r\nconst saveUserDataToStorage = async (userToken, userType) => {\r\n  try {\r\n    await AsyncStorage.setItem(\r\n      \"userData\",\r\n      JSON.stringify({\r\n        userToken: userToken,\r\n        userType: userType,\r\n      })\r\n    );\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nconst removeTokenToStorage = async (token) => {\r\n  try {\r\n    await AsyncStorage.removeItem(\"userData\");\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n"]}